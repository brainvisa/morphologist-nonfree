/****************************************************************************
 * PROJECT     : V.I.P. Library
 * MODULE NAME : Vip_matrix.gen       * TYPE     : Generic
 * AUTHOR      : POUPON F.            * CREATION : 07/03/1997
 * VERSION     : 0.1                  * REVISION :
 * LANGUAGE    : C++                  * EXAMPLE  :
 * DEVICE      : Sun SPARC Station 5
 ****************************************************************************
 *
 * DESCRIPTION : Fonctions de calcul matriciel
 *               VipLUDecompose, VipLUBackSubstitution, VipGaussJordan and
 *               VipGaussJordanMatrixInversion are adapted from Numerical
 *               Recipes in C
 *
 ****************************************************************************
 *
 * USED MODULES : Vip_math.h
 *
 ****************************************************************************
 * REVISIONS :  DATE  |    AUTHOR    |       DESCRIPTION
 *--------------------|--------------|---------------------------------------
 *            30/04/97| POUPON F.    | Ajout des fonctions :
 *                    |              |   VipGaussJordan_GENSTRING
 *                    |              |   VipGaussJordanMatrixInversion_GENSTRING
 *--------------------|--------------|---------------------------------------
 *              / /   |              |
 ****************************************************************************/

#include <vip/math.h>

#TYPED_FUNC_BEGIN VipGaussJordan_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#PROTOTYPE_BEGIN
int VipGaussJordan_GENSTRING(VipMatrix_GENSTRING *a, VipMatrix_GENSTRING *b)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ int i, j, k, l, ll, icol=0, irow=0, n, m;
  GENTYPE big, dum, pivinv, temp;
  VipVector_S16BIT *indxc, *indxr, *ipiv;
  GENTYPE **aptr, **bptr;
  Vip_S16BIT *indxcptr, *indxrptr, *ipivptr;

  aptr = VipGetMatrixPtr_GENSTRING(a);
  bptr = VipGetMatrixPtr_GENSTRING(b);

  n = mVipMatrixSizeY(a);
  if (n != mVipMatrixSizeY(b))
  { VipPrintfError("Incompatible matrix Y sizes");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordan");
    return(PB);
  }

  m = mVipMatrixSizeX(a);
  if (n != mVipMatrixSizeX(b))
  { VipPrintfError("Incompatible matrix X sizes");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordan");
    return(PB);
  }

  indxc = VipAllocationVector_S16BIT(n, NULL);
  if (!indxc)
  { VipPrintfError("Error while allocating temporary column vector");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordan");
    return(PB);
  }

  indxr = VipAllocationVector_S16BIT(n, NULL);
  if (!indxr)
  { VipPrintfError("Error while allocating temporary row vector");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordan");
    VipFreeVector_S16BIT(indxc);
    return(PB);
  }

  ipiv = VipAllocationVector_S16BIT(n, NULL);
  if (!ipiv)
  { VipPrintfError("Error while allocating temporary pivot vector");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordan");
    VipFreeVector_S16BIT(indxc);
    VipFreeVector_S16BIT(indxr);
    return(PB);
  }

  indxcptr = VipGetVectorPtr_S16BIT(indxc);
  indxrptr = VipGetVectorPtr_S16BIT(indxr);
  ipivptr = VipGetVectorPtr_S16BIT(ipiv);

  for (j=0; j<n; j++)  ipivptr[j] = 0;
  for (i=0; i<n; i++)
  { big = 0.0;
    for (j=0; j<n; j++)
      if (ipivptr[j] != 1)
        for (k=0; k<n; k++)
	{ if (ipivptr[k] == 0)
	  { if ((GENTYPE)fabs(aptr[j][k]) >= big)
	    { big = (GENTYPE)fabs(aptr[j][k]);
              irow = j;
              icol = k;
	    }
	  }
          else if (ipivptr[k] > 1)  
	  { VipPrintfError("Singular Matrix");
            VipPrintfExit("(Vip_matrix.c)VipGaussJordan");
            VipFreeVector_S16BIT(indxc);
            VipFreeVector_S16BIT(indxr);
            VipFreeVector_S16BIT(ipiv);
            return(PB);
	  }
	}
    ++(ipivptr[icol]);
    if (irow != icol)
    { for (l=0; l<n; l++)
      { temp = aptr[irow][l];
        aptr[irow][l] = aptr[icol][l];
        aptr[icol][l] = temp;
      }
      for (l=0; l<m; l++)
      { temp = bptr[irow][l];
        bptr[irow][l] = bptr[icol][l];
        bptr[icol][l] = temp;
      }
    }
    indxrptr[i] = irow;
    indxcptr[i] = icol;
    if (aptr[icol][icol] == 0.0)
    { VipPrintfError("Singular Matrix");
      VipPrintfExit("(Vip_matrix.c)VipGaussJordan");
      VipFreeVector_S16BIT(indxc);
      VipFreeVector_S16BIT(indxr);
      VipFreeVector_S16BIT(ipiv);
      return(PB);
    }
    pivinv = 1.0/aptr[icol][icol];
    aptr[icol][icol] = 1.0;
    for (l=0; l<n; l++)  aptr[icol][l] *= pivinv;
    for (l=0; l<m; l++)  bptr[icol][l] *= pivinv;
    for (ll=0; ll<n; ll++)
      if (ll != icol)
      { dum = aptr[ll][icol];
        aptr[ll][icol] = 0.0;
        for (l=0; l<n; l++)  aptr[ll][l] -= aptr[icol][l]*dum;
        for (l=0; l<m; l++)  bptr[ll][l] -= bptr[icol][l]*dum;
      }
  }
  for (l=n; l--;)
  { if (indxrptr[l] != indxcptr[l])
      for (k=0; k<n; k++)
      { temp = aptr[k][indxrptr[l]];
        aptr[k][indxrptr[l]] = aptr[k][indxcptr[l]];
        aptr[k][indxcptr[l]] = temp;
      }
  }
  VipFreeVector_S16BIT(ipiv);
  VipFreeVector_S16BIT(indxr);
  VipFreeVector_S16BIT(indxc);

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipGaussJordanMatrixInversion_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipGaussJordanMatrixInversion_GENSTRING(VipMatrix_GENSTRING *matrix)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *inverse, *b;
  int i, j, n;
  GENTYPE **invptr, **matptr, **bptr;

  n = mVipMatrixSizeX(matrix);
  if (n != mVipMatrixSizeY(matrix))
  { VipPrintfError("Not a square matrix");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordanMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }

  inverse = VipAllocationMatrix_GENSTRING(n, n, NULL);
  if (!inverse)
  { VipPrintfError("Error while allocating inverse matrix");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordanMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }
  
  b = VipAllocationMatrix_GENSTRING(n, n, NULL);
  if (!b)
  { VipPrintfError("Error while allocating b matrix");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordanMatrixInversion");
    VipFreeMatrix_GENSTRING(inverse);
    return((VipMatrix_GENSTRING *)NULL);
  }

  matptr = VipGetMatrixPtr_GENSTRING(matrix);
  invptr = VipGetMatrixPtr_GENSTRING(inverse);
  bptr = VipGetMatrixPtr_GENSTRING(b);
  for (j=n; j--;)
    for (bptr[j][j]=1.0, i=n; i--;)  invptr[i][j] = matptr[i][j];

  if (!VipGaussJordan_GENSTRING(inverse, b))
  { VipPrintfError("Error while processing Gauss Jordan elimination");
    VipPrintfExit("(Vip_matrix.c)VipGaussJordanMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }

  VipFreeMatrix_GENSTRING(b);

  return(inverse);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipLUDecompose_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#PROTOTYPE_BEGIN
int VipLUDecompose_GENSTRING(VipMatrix_GENSTRING *a, VipVector_S16BIT *indx, GENTYPE *d)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ int i, imax=0, j, k, n;
  GENTYPE big, dum, sum, temp, **aptr, *vvptr, TINY=1.0e-20;
  VipVector_GENSTRING *vv;
  Vip_S16BIT *indxptr;

  aptr = VipGetMatrixPtr_GENSTRING(a);
  indxptr = VipGetVectorPtr_S16BIT(indx);

  n = mVipMatrixSizeX(a);
  if (n != mVipMatrixSizeY(a))
  { VipPrintfError("Not a square matrix");
    VipPrintfExit("(Vip_matrix.c)VipLUDecompose");
    return(PB);
  }

  vv = VipAllocationVector_GENSTRING(n, NULL);
  if (!vv)
  { VipPrintfError("Error while allocating temporary vector");
    VipPrintfExit("(Vip_matrix.c)VipLUDecompose");
    return(PB);
  }

  vvptr = VipGetVectorPtr_GENSTRING(vv);
  *d = 1.0;

  for (i=0; i<n; i++)
  { big = 0.0;
    for (j=0; j<n; j++)
      if ((temp = (GENTYPE)fabs(aptr[i][j])) > big)  big = temp;
    if (big == 0.0)
    { VipPrintfError("Matrix is singular");
      VipPrintfExit("(Vip_matrix.c)VipLUDecompose");
      return(PB);
    }
    vvptr[i] = 1.0/big;
  }

  for (j=0; j<n; j++)
  { for (i=0; i<j; i++)
    { sum = aptr[i][j];
      for (k=0; k<i; k++)  sum -= aptr[i][k]*aptr[k][j];
      aptr[i][j] = sum;
    }

    big = 0.0;
    for (i=j; i<n; i++)
    { sum = aptr[i][j];
      for (k=0; k<j; k++)  sum -= aptr[i][k]*aptr[k][j];
      aptr[i][j] = sum;
      if ((dum = vvptr[i]*(GENTYPE)fabs(sum)) >= big)
      { big = dum;
        imax = i;
      }
    }

    if (j != imax)
    { for (k=0; k<n; k++)
      { dum = aptr[imax][k];
        aptr[imax][k] = aptr[j][k];
        aptr[j][k] = dum;
      }
      *d = -(*d);
      vvptr[imax] = vvptr[j];
    }
    indxptr[j] = (Vip_S16BIT)imax;
    if (aptr[j][j] == 0.0)  aptr[j][j] = TINY;
    if (j != n)
    { dum = 1.0/aptr[j][j];
      for (i=j+1; i<n; i++)  aptr[i][j] *= dum;
    }
  }

  VipFreeVector_GENSTRING(vv);

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipLUBackSubstitution_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#PROTOTYPE_BEGIN
int VipLUBackSubstitution_GENSTRING(VipMatrix_GENSTRING *a, VipVector_S16BIT *indx, VipVector_GENSTRING *b)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ int i, ii=-1, ip, j, n;
  GENTYPE sum, **aptr, *bptr;
  Vip_S16BIT *indxptr;

  aptr = VipGetMatrixPtr_GENSTRING(a);
  indxptr = VipGetVectorPtr_S16BIT(indx);
  bptr = VipGetVectorPtr_GENSTRING(b);

  n = mVipMatrixSizeX(a);
  if (n != mVipMatrixSizeY(a))
  { VipPrintfError("Not a square matrix");
    VipPrintfExit("(Vip_matrix.c)VipLUBackSubstitution");
    return(PB);
  }

  for (i=0; i<n; i++)
  { ip = (int)indxptr[i];
    sum = bptr[ip];
    bptr[ip] = bptr[i];
    if (ii != -1)
      for (j=ii; j<=i-1; j++)  sum -= aptr[i][j]*bptr[j];
    else if (sum)  ii = i;
    bptr[i] = sum;
  }
  for (i=n; i--;)
  { sum = bptr[i];
    for (j=i+1; j<n; j++)  sum -= aptr[i][j]*bptr[j];
    bptr[i] = sum/aptr[i][i];
  }

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipMatrixInversion_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipMatrixInversion_GENSTRING(VipMatrix_GENSTRING *matrix)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *inverse, *stockage;
  VipVector_GENSTRING *column;
  VipVector_S16BIT *indx;
  int n, i, j;
  GENTYPE d, *colptr, **invptr, **stockptr, **matptr;

  n = mVipMatrixSizeX(matrix);
  if (n != mVipMatrixSizeY(matrix))
  { VipPrintfError("Not a square matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }

  inverse = VipAllocationMatrix_GENSTRING(n, n, NULL);
  if (!inverse)
  { VipPrintfError("Error while allocating inverse matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }

  stockage = VipAllocationMatrix_GENSTRING(n, n, NULL);
  if (!stockage)
  { VipPrintfError("Error while allocating stockage matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }
  
  matptr = VipGetMatrixPtr_GENSTRING(matrix);
  stockptr = VipGetMatrixPtr_GENSTRING(stockage);
  for (j=n; j--;)
    for (i=n; i--;)  stockptr[i][j] = matptr[i][j];

  column = VipAllocationVector_GENSTRING(n, NULL);
  if (!column)
  { VipPrintfError("Error while allocating temporary vector");
    VipPrintfExit("(Vip_matrix.c)VipMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }

  indx = VipAllocationVector_S16BIT(n, NULL);
  if (!indx)
  { VipPrintfError("Error while allocating index vector");
    VipPrintfExit("(Vip_matrix.c)VipMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }
 
  invptr = VipGetMatrixPtr_GENSTRING(inverse);
  colptr = VipGetVectorPtr_GENSTRING(column);

  if (!VipLUDecompose_GENSTRING(stockage, indx, &d))
  { VipPrintfError("Error while processing LU decomposition");
    VipPrintfExit("(Vip_matrix.c)VipMatrixInversion");
    return((VipMatrix_GENSTRING *)NULL);
  }

  for (j=0; j<n; j++)
  { for (i=0; i<n; i++)  colptr[i] = 0.0;
    colptr[j] = 1.0;
    VipLUBackSubstitution_GENSTRING(stockage, indx, column);
    for (i=0; i<n; i++)  invptr[i][j] = colptr[i];
  }

  VipFreeVector_S16BIT(indx);
  VipFreeVector_GENSTRING(column);
  VipFreeMatrix_GENSTRING(stockage);

  return(inverse);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipMatrixDeterminant_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#PROTOTYPE_BEGIN
GENTYPE VipMatrixDeterminant_GENSTRING(VipMatrix_GENSTRING *matrix)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ GENTYPE determinant, **matptr, **stockptr;
  VipVector_S16BIT *indx;
  VipMatrix_GENSTRING *stockage;
  int j, i, n;  

  n = mVipMatrixSizeX(matrix);
  if (n != mVipMatrixSizeY(matrix))
  { VipPrintfError("Not a square matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixDeterminant");
    return((GENTYPE)0.0);
  }

  stockage = VipAllocationMatrix_GENSTRING(n, n, NULL);
  if (!stockage)
  { VipPrintfError("Error while allocating stockage matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixDeterminant");
    return((GENTYPE)0.0);
  }

  matptr = VipGetMatrixPtr_GENSTRING(matrix);
  stockptr = VipGetMatrixPtr_GENSTRING(stockage);
  for (j=n; j--;)
    for (i=n; i--;)  stockptr[i][j] = matptr[i][j];

  indx = VipAllocationVector_S16BIT(n, NULL);
  if (!indx)
  { VipPrintfError("Error while allocation index vector");
    VipPrintfExit("(Vip_matrix.c)VipMatrixDeterminant");
    return((GENTYPE)0.0);
  }

  if (!VipLUDecompose_GENSTRING(stockage, indx, &determinant))
  { VipPrintfError("Error while processing LU decomposition");
    VipPrintfExit("(Vip_matrix.c)VipMatrixDeterminant");
    return((GENTYPE)0.0);
  }

  stockptr = VipGetMatrixPtr_GENSTRING(stockage);
  for (j=0; j<n; j++)  determinant *= stockptr[j][j];

  VipFreeMatrix_GENSTRING(stockage);

  return(determinant);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipMatrixTransposition_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipMatrixTransposition_GENSTRING(VipMatrix_GENSTRING *matrix)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *transpose;
  GENTYPE **transptr, **matptr;
  int i, j, n;
  
  n = mVipMatrixSizeX(matrix);
  if (n != mVipMatrixSizeY(matrix))
  { VipPrintfError("Not a square matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixTransposition");
    return((VipMatrix_GENSTRING *)NULL);
  }

  transpose = VipAllocationMatrix_GENSTRING(n, n, NULL);
  if (!transpose)
  { VipPrintfError("Error while allocating transpose matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixTransposition");
    return((VipMatrix_GENSTRING *)NULL);
  }

  matptr = VipGetMatrixPtr_GENSTRING(matrix);
  transptr = VipGetMatrixPtr_GENSTRING(transpose);

  for (i=n; i--;)  transptr[i][i] = matptr[i][i];
  for (j=1; j<n; j++)
    for (i=0; i<j; i++)  
    { transptr[i][j] = matptr[j][i];
      transptr[j][i] = matptr[i][j];
    }

  return(transpose);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipMatrixPerVectorProduct_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
VipVector_GENSTRING *VipMatrixPerVectorProduct_GENSTRING(VipMatrix_GENSTRING *matrix, VipVector_GENSTRING *vector)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipVector_GENSTRING *product;
  GENTYPE *prodptr, **matptr, *vecptr;
  int i, j, n;

  n = mVipVectorSize(vector);

  if (mVipMatrixSizeY(matrix) < n)
  { VipPrintfError("Incompatible matrix and vector sizes");
    VipPrintfExit("(Vip_matrix.c)VipMatrixPerVectorProduct");
    return((VipVector_GENSTRING *)NULL);
  }

  product = VipAllocationVector_GENSTRING(n, NULL);
  if (!product)
  { VipPrintfError("Error while allocating product vector");
    VipPrintfExit("(Vip_matrix.c)VipMatrixPerVectorProduct");
    return((VipVector_GENSTRING *)NULL);
  }

  prodptr = VipGetVectorPtr_GENSTRING(product);
  matptr = VipGetMatrixPtr_GENSTRING(matrix);
  vecptr = VipGetVectorPtr_GENSTRING(vector);

  for (j=0; j<n; j++)
    for (i=0; i<n; i++)  prodptr[j] += matptr[j][i]*vecptr[i];

  return(product);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipMatrixProduct_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipMatrixProduct_GENSTRING(VipMatrix_GENSTRING *A, VipMatrix_GENSTRING *B)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *product;
  GENTYPE **prodptr, **Aptr, **Bptr;
  int i, j, k, n, m, l;

  m = mVipMatrixSizeX(A);
  n = mVipMatrixSizeY(B);
  l = mVipMatrixSizeY(A);

  if (l != mVipMatrixSizeX(B))
  { VipPrintfError("Incompatible matrix sizes");
    VipPrintfExit("(Vip_matrix.c)VipMatrixProduct");
    return((VipMatrix_GENSTRING *)NULL);
  }

  product = VipAllocationMatrix_GENSTRING(m, n, NULL);
  if (!product)
  { VipPrintfError("Error while allocating product matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixProduct");
    return((VipMatrix_GENSTRING *)NULL);
  }

  prodptr = VipGetMatrixPtr_GENSTRING(product);
  Aptr = VipGetMatrixPtr_GENSTRING(A);
  Bptr = VipGetMatrixPtr_GENSTRING(B);

  for (j=0; j<m; j++)
    for (i=0; i<n; i++)
      for (k=0; k<l; k++)  prodptr[j][i] += Aptr[j][k]*Bptr[k][i];

  return(product);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipAddMatrix_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipAddMatrix_GENSTRING(VipMatrix_GENSTRING *A, VipMatrix_GENSTRING *B)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *sum;
  GENTYPE **sumptr, **Aptr, **Bptr;
  int i, j, n, m;

  n = mVipMatrixSizeX(A);
  m = mVipMatrixSizeY(A);

  if ((n != mVipMatrixSizeX(B)) || (m != mVipMatrixSizeY(B)))
  { VipPrintfError("Incompatible matrix sizes");
    VipPrintfExit("(Vip_matrix.c)VipAddMatrix");
    return((VipMatrix_GENSTRING *)NULL);
  }

  sum = VipAllocationMatrix_GENSTRING(n, m, NULL);
  if (!sum)
  { VipPrintfError("Error while allocating sum matrix");
    VipPrintfExit("(Vip_matrix.c)VipAddMatrix");
    return((VipMatrix_GENSTRING *)NULL);
  }

  sumptr = VipGetMatrixPtr_GENSTRING(sum);
  Aptr = VipGetMatrixPtr_GENSTRING(A);
  Bptr = VipGetMatrixPtr_GENSTRING(B);

  for (j=0; j<n; j++)
    for (i=0; i<m; i++)  sumptr[j][i] = Aptr[j][i]+Bptr[j][i];

  return(sum);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipSubMatrix_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipSubMatrix_GENSTRING(VipMatrix_GENSTRING *A, VipMatrix_GENSTRING *B)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *diff;
  GENTYPE **diffptr, **Aptr, **Bptr;
  int i, j, n, m;

  n = mVipMatrixSizeX(A);
  m = mVipMatrixSizeY(A);

  if ((n != mVipMatrixSizeX(B)) || (m != mVipMatrixSizeY(B)))
  { VipPrintfError("Incompatible matrix sizes");
    VipPrintfExit("(Vip_matrix.c)VipSubMatrix");
    return((VipMatrix_GENSTRING *)NULL);
  }

  diff = VipAllocationMatrix_GENSTRING(n, m, NULL);
  if (!diff)
  { VipPrintfError("Error while allocating substraction matrix");
    VipPrintfExit("(Vip_matrix.c)VipSubMatrix");
    return((VipMatrix_GENSTRING *)NULL);
  }

  diffptr = VipGetMatrixPtr_GENSTRING(diff);
  Aptr = VipGetMatrixPtr_GENSTRING(A);
  Bptr = VipGetMatrixPtr_GENSTRING(B);

  for (j=0; j<n; j++)
    for (i=0; i<m; i++)  diffptr[j][i] = Aptr[j][i]-Bptr[j][i];

  return(diff);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipMatrixPerScalar_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipMatrixPerScalar_GENSTRING(VipMatrix_GENSTRING *matrix, GENTYPE scalar)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *scalmat;
  GENTYPE **scalptr, **matptr;
  int i, j, n, m;

  n = mVipMatrixSizeX(matrix);
  m = mVipMatrixSizeY(matrix);

  scalmat = VipAllocationMatrix_GENSTRING(n, m, NULL);
  if (!scalmat)
  { VipPrintfError("Error while allocating scalar matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixPerScalar");
    return((VipMatrix_GENSTRING *)NULL);
  }

  scalptr = VipGetMatrixPtr_GENSTRING(scalmat);
  matptr = VipGetMatrixPtr_GENSTRING(matrix);

  for (j=0; j<m; j++)
    for (i=0; i<n; i++)  scalptr[i][j] = scalar*matptr[i][j];

  return(scalmat);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipMatrixTrace_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
GENTYPE VipMatrixTrace_GENSTRING(VipMatrix_GENSTRING *matrix)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ GENTYPE trace, **matptr;
  int i, n;
 
  trace = (GENTYPE)0.0;

  n = mVipMatrixSizeX(matrix);
  if (n != mVipMatrixSizeY(matrix))
  { VipPrintfError("Not a square matrix");
    VipPrintfExit("(Vip_matrix.c)VipMatrixTrace");
    return((GENTYPE)0.0);
  }
  matptr = VipGetMatrixPtr_GENSTRING(matrix);

  for (i=n; i--;)  trace += matptr[i][i];

  return(trace);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipInnerProductFromMatrixAndVector_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
GENTYPE VipInnerProductFromMatrixAndVector_GENSTRING(VipMatrix_GENSTRING *matrix, VipVector_GENSTRING *vector)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ GENTYPE scalar, *vecptr, *tempptr;
  int i, n;
  VipVector_GENSTRING *temp;
  
  n = mVipMatrixSizeX(matrix);
  scalar = (GENTYPE)0.0;

  if (n != mVipMatrixSizeY(matrix))
  { VipPrintfError("Not a square matrix");
    VipPrintfExit("(Vip_matrix.c)VipInnerProductFromMatrixAndVector");
    return((GENTYPE)0.0);
  }

  if (n != mVipVectorSize(vector))
  { VipPrintfError("Incompatible matrix and vector sizes");
    VipPrintfExit("(Vip_matrix.c)VipInnerProductFromMatrixAndVector");
    return((GENTYPE)0.0);
  }

  temp = VipMatrixPerVectorProduct_GENSTRING(matrix, vector);
  if (!temp)
  { VipPrintfError("Error while computing matrix per vector product");
    VipPrintfExit("(Vip_matrix.c)VipInnerProductFromMatrixAndVector");
    return((GENTYPE)0.0);
  }

  vecptr = VipGetVectorPtr_GENSTRING(vector);
  tempptr = VipGetVectorPtr_GENSTRING(temp);

  for (i=0; i<n; i++)  scalar += vecptr[i]*tempptr[i];
    
  VipFreeVector_GENSTRING(temp);

  return(scalar);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipCovarianceMatrix_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipCovarianceMatrix_GENSTRING(VipMatrix_GENSTRING *data, VipVector_GENSTRING *mean)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *covariance, *centre;
  VipVector_GENSTRING *local_mean;
  GENTYPE **covptr, **dataptr, **centreptr, *meanptr;
  int nb_param, nb_test, i, j, j1, j2, ret_mean=1;
  
  nb_param = mVipMatrixSizeY(data);
  nb_test = mVipMatrixSizeX(data);

  if (nb_test < 2)
  { VipPrintfError("Not enough data to compute covariance matrix");
    VipPrintfExit("(Vip_matrix.c)VipCovarianceMatrix");
    return((VipMatrix_GENSTRING *)NULL);
  }

  if (mean == NULL)  ret_mean = 0;

  covariance = VipAllocationMatrix_GENSTRING(nb_param, nb_param, NULL);
  if (!covariance)
  { VipPrintfError("Error while allocating covariance matrix");
    VipPrintfExit("(Vip_matrix.c)VipCovarianceMatrix");
    return((VipMatrix_GENSTRING *)NULL);
  }

  centre = VipAllocationMatrix_GENSTRING(nb_test, nb_param, NULL);
  if (!centre)
  { VipPrintfError("Error while allocating centered data matrix");
    VipPrintfExit("(Vip_matrix.c)VipCovarianceMatrix");
    if (covariance)  VipFreeMatrix_GENSTRING(covariance);
    return((VipMatrix_GENSTRING *)NULL);
  }

  if (!ret_mean)  
  { local_mean = VipAllocationVector_GENSTRING(nb_param, NULL);
    if (!local_mean)
    { VipPrintfError("Error while allocating local mean vector");
      VipPrintfExit("(Vip_matrix.c)VipCovarianceMatrix");
      return((VipMatrix_GENSTRING *)NULL);
    }
  }
  else local_mean = mean;

  covptr = VipGetMatrixPtr_GENSTRING(covariance);
  dataptr = VipGetMatrixPtr_GENSTRING(data);
  centreptr = VipGetMatrixPtr_GENSTRING(centre);
  meanptr = VipGetVectorPtr_GENSTRING(local_mean);

  for (j=0; j<nb_param; j++)
    for (i=0; i<nb_test; i++)  centreptr[i][j] = dataptr[i][j];

  for (j=0; j<nb_param; j++)
  { for (meanptr[j]=(GENTYPE)0.0, i=0; i<nb_test; i++)  meanptr[j] += dataptr[i][j];
    meanptr[j] /= (GENTYPE)nb_test;
  }

  for (j=0; j<nb_param; j++)
    for (i=0; i<nb_test; i++)  centreptr[i][j] -= meanptr[j];

  for (j1=0; j1<nb_param; j1++)
    for (j2=j1; j2<nb_param; j2++)
    { for (covptr[j2][j1]=0.0, i=0; i<nb_test; i++)  
        covptr[j2][j1] += centreptr[i][j1]*centreptr[i][j2]/(GENTYPE)(nb_test-1);
      covptr[j1][j2] = covptr[j2][j1];
    }

  if (!ret_mean)  
  { VipFreeVector_GENSTRING(local_mean);
    local_mean = NULL;
  }

  VipFreeMatrix_GENSTRING(centre);

  return(covariance);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipReadMatrix_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
VipMatrix_GENSTRING *VipReadMatrix_GENSTRING(char *filename, size_t dimx, size_t dimy)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ VipMatrix_GENSTRING *matrix;
  GENTYPE **matptr;
  int temp;
  size_t i, j, type=GENSTRING;
  FILE *file;

  file = fopen(filename, VIP_READ_TEXT);
  if (!file)
  { VipPrintfError("Unable to open file or file does not exist");
    VipPrintfExit("(Vip_matrix.c)VipReadMatrix");
    return((VipMatrix_GENSTRING *)NULL);
  }

  matrix = VipAllocationMatrix_GENSTRING(dimx, dimy, NULL);
  if (!matrix)
  { VipPrintfError("Error while allocating matrix");
    VipPrintfExit("(Vip_matrix.c)VipReadMatrix");
    return((VipMatrix_GENSTRING *)NULL);
  }

  matptr = VipGetMatrixPtr_GENSTRING(matrix);

  switch(type)
  { case U8BIT : for (j=0; j<dimx; j++)
                   for (i=0; i<dimy; i++)  
                   { fscanf(file, "%d", &temp);
                     matptr[j][i] = (unsigned char)temp;
                   }
                 break;
    case S8BIT : for (j=0; j<dimx; j++)
                   for (i=0; i<dimy; i++)  
                   { fscanf(file, "%d", &temp);
                     matptr[j][i] = (char)temp;
                   }
                 break;
    case U16BIT : for (j=0; j<dimx; j++)
                    for (i=0; i<dimy; i++)  
                      fscanf(file, "%hu",(unsigned short*)&matptr[j][i]);
                  break;
    case S16BIT : for (j=0; j<dimx; j++)
                    for (i=0; i<dimy; i++)  
                      fscanf(file, "%hd",(short*) &matptr[j][i]);
                  break;
    case U32BIT : for (j=0; j<dimx; j++)
                    for (i=0; i<dimy; i++)
                      fscanf(file, "%lu",(unsigned long*)&matptr[j][i]);
                  break;
    case S32BIT : for (j=0; j<dimx; j++)
                    for (i=0; i<dimy; i++)
                      fscanf(file, "%ld",(long*)&matptr[j][i]);
                  break;
    case VFLOAT : for (j=0; j<dimx; j++)
                   for (i=0; i<dimy; i++)
                     fscanf(file, "%f",(float*)&matptr[j][i]);
                 break;
    case VDOUBLE : for (j=0; j<dimx; j++)
                    for (i=0; i<dimy; i++)
                      fscanf(file, "%lf",(double*)&matptr[j][i]);
                  break;
  }

  fclose(file);

  return(matrix);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipWriteMatrix_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
int VipWriteMatrix_GENSTRING(char *filename, VipMatrix_GENSTRING *matrix)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ GENTYPE **matptr;
  int i, j, dimx, dimy, type=GENSTRING;
  FILE *file;

  file = fopen(filename, VIP_WRITE_TEXT);
  if (!file)
  { VipPrintfError("Unable to open file");
    VipPrintfExit("(Vip_matrix.c)VipWriteMatrix");
    return(PB);
  }

  dimx = mVipMatrixSizeX(matrix);
  dimy = mVipMatrixSizeY(matrix);
  matptr = VipGetMatrixPtr_GENSTRING(matrix);

  switch(type)
  { case U8BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(file, "%d ", (int)matptr[j][i]);
                    fprintf(file, "\n");
                  }
                  break;
    case S8BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(file, "%d ", (int)matptr[j][i]);
                    fprintf(file, "\n");
                  }
                  break;
    case U16BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(file, "%hu ", (unsigned short)matptr[j][i]);
                    fprintf(file, "\n");
                  }
                  break;
    case S16BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(file, "%hd ", (short)matptr[j][i]);
                    fprintf(file, "\n");
                  }
                  break;
    case U32BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(file, "%lu ", (unsigned long)matptr[j][i]);
                    fprintf(file, "\n");
                  }
                  break;
    case S32BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(file, "%ld ", (long)matptr[j][i]);
                    fprintf(file, "\n");
                  }
                  break;
    case VFLOAT : for (j=0; j<dimx; j++)
                 { for (i=0; i<dimy; i++)
                     fprintf(file, "%f ",(float) matptr[j][i]);
                   fprintf(file, "\n");
                 }
                 break;
    case VDOUBLE : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(file, "%f ", (double)matptr[j][i]);
                    fprintf(file, "\n");
                  }
                  break;
  }

  fclose(file);

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipPrintStreamMatrix_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
void VipPrintStreamMatrix_GENSTRING(FILE *stream, VipMatrix_GENSTRING *matrix)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ GENTYPE **matptr;
  int i, j, dimx, dimy, type=GENSTRING;

  dimx = mVipMatrixSizeX(matrix);
  dimy = mVipMatrixSizeY(matrix);
  matptr = VipGetMatrixPtr_GENSTRING(matrix);

  switch(type)
  { case U8BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(stream, "%d ", (int)matptr[j][i]);
                    fprintf(stream, "\n");
                  }
                  break;
    case S8BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(stream, "%d ",(int)matptr[j][i]);
                    fprintf(stream, "\n");
                  }
                  break;
    case U16BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(stream, "%hu ",(unsigned short)matptr[j][i]);
                    fprintf(stream, "\n");
                  }
                  break;
    case S16BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(stream, "%hd ", (short)matptr[j][i]);
                    fprintf(stream, "\n");
                  }
                  break;
    case U32BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(stream, "%lu ",(unsigned long) matptr[j][i]);
                    fprintf(stream, "\n");
                  }
                  break;
    case S32BIT : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(stream, "%ld ",(long) matptr[j][i]);
                    fprintf(stream, "\n");
                  }
                  break;
    case VFLOAT : for (j=0; j<dimx; j++)
                 { for (i=0; i<dimy; i++)
                     fprintf(stream, "%f ",(float) matptr[j][i]);
                   fprintf(stream, "\n");
                 }
                 break;
    case VDOUBLE : for (j=0; j<dimx; j++)
                  { for (i=0; i<dimy; i++)
                      fprintf(stream, "%f ",(double) matptr[j][i]);
                    fprintf(stream, "\n");
                  }
                  break;
  }
}
#FUNCTION_END
#TYPED_FUNC_END

#TYPED_FUNC_BEGIN VipPrintMatrix_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
int VipPrintMatrix_GENSTRING(char *filename, VipMatrix_GENSTRING *matrix)
#PROTOTYPE_END
#FUNCTION_BEGIN
{ FILE *file;

  if (filename == NULL) VipPrintStreamMatrix_GENSTRING(stdout, matrix);
  else
  { file = fopen(filename, VIP_WRITE_TEXT);
    if (!file)
    { VipPrintfError("Unable to open file");
      VipPrintfExit("(Vip_matrix.c)VipPrintMatrix");
      return(PB);
    }
    VipPrintStreamMatrix_GENSTRING(file, matrix);
    fclose(file);
  }

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END
