/*****************************************************************************
 * PROJECT     : V.I.P. Library
 * MODULE NAME : Vip_volume.gen       * TYPE     : Source
 * AUTHOR      : MANGIN J.F.          * CREATION : 16/01/1996
 * VERSION     : 0.1                  * REVISION :
 * LANGUAGE    : C                    * EXAMPLE  :
 * DEVICE      : Sun SPARC Station 5
 *****************************************************************************
 *
 * DESCRIPTION : Creation de 'Vip_volume.gen' fortement inspire des 
 *               entrees/sorties de la librairie Tivoli du département image
 *               de Telecom Paris de maniere a pouvoir utiliser le meme format
 *               d'images en memoire. Le but escompte est la possibilite de 
 *               link simultane avec Tivoli (ENST) et Vip (Volumic Image 
 *               Processing SHFJ).
 *               Les principales differences resident dans la gestion du 
 *               format du SHFJ dedie aux images fonctionnelles, dans la
 *               gestion des series dynamiques (images 4D) et la mise en 
 *               oeuvre de procedures generiques (plutot que des switch comme
 *               dans Tivoli) dans le cas ou la gestion du type des images 
 *               est necessaire.
 *               Cette derniere difference se manifeste par un split du
 *               fichier volume.c initial en un fichier de procedure "type
 *               independant" et un fichier generique volume.gen
 *
 *               Tout ce qui concerne le mode trace a ete decalque...
 *               (debugger oblige)
 *
 *               En outre, de maniere a reduire les probabilites de conflits 
 *               entre les deux librairies, les diverses fonctions destinees
 *               a la gestion de cette structure de donnee ont ete dotees du 
 *               prefixe "Vip" (ainsi que generalement d'une majuscule 
 *               supplementaire), les alias des divers types de donnees ont 
 *               ete dotes du prefixe "Vip_" (le suffixe _t a ete supprime)
 *               jfmangin@cea.fr
 *
 *****************************************************************************
 *
 * USED MODULES : 
 *
 *****************************************************************************
 * REVISIONS :  DATE  |    AUTHOR    |       DESCRIPTION
 *--------------------|--------------|----------------------------------------
 *              / /   |              |
 *****************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <limits.h>

#include <vip/volume.h>
#include <vip/volume_static.h>
#include <vip/alloc.h>


#NONTYPED_FUNC_BEGIN VipTransferDataToFloatVolume
#TYPE_LIST ANY
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
int			VipTransferDataToFloatVolume
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
        Volume      *fvol
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  int status=0;

  if(VipTestExist( volume )==PB)
    {
      VipPrintfExit("(volume.gen)VipTransferDataToFloatVolume");
      return(PB);
    }
  if((VipVerifyAll( fvol )==PB)||(VipTestType(fvol,VFLOAT)==PB))
    {
      VipPrintfError("PB with FLOAT volume");
      VipPrintfExit("(volume.gen)VipTransferDataToFloatVolume");
      return(PB);
    }

 switch( mVipVolType( volume ) )
   {
   case GENSTRING :
     status = VipTransferDataToFloatVolume_GENSTRING( volume, fvol);
     break;
   }
 return(status);
}
#FUNCTION_END
#NONTYPED_FUNC_END

#TYPED_FUNC_BEGIN VipTransferDataToFloatVolume_GENSTRING
#TYPE_LIST_STATIC ANY
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
	int			VipTransferDataToFloatVolume_GENSTRING
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	Volume *fvol
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  char message[VIP_NAME_MAXLEN];
  long offset_pbl, offset_lbs, offset_vol, offset_fp;
  long foffset_pbl, foffset_lbs, foffset_vol, foffset_fp;
  int xsize, ysize, zsize, tsize;
  int ix, iy, iz, it;
  GENTYPE *dataGENSTRING, *ptrGENSTRING;
  Vip_FLOAT *fdata, *fptr;

  if (VipTestState(fvol,STATE_DECLARED))
    {
      (void)sprintf(message,"(VipTransferDataToFloatVolume_GENSTRING)Allocate data for volume %s",VipGetVolumeName(fvol));
      VipPrintfWarning(message);
      if (VipAllocateVolumeData(fvol)==PB) return(PB);
    }
  if ( (mVipVolSizeX(volume)!=mVipVolSizeX(fvol))
       ||(mVipVolSizeY(volume)!=mVipVolSizeY(fvol))
       ||(mVipVolSizeT(volume)!=mVipVolSizeT(fvol))
       ||(mVipVolSizeZ(volume)!=mVipVolSizeZ(fvol)))
   {
      VipPrintfError("Same size are required in 4 dimensions...");
      VipPrintfExit("VipTransferDataToFloatVolume_GENSTRING");
      return(PB);
   }

   VipGet4DSize(volume,&xsize,&ysize,&zsize,&tsize);
	
  offset_vol = VipOffsetVolume( volume );
  offset_pbl = VipOffsetPointBetweenLine( volume );
  offset_lbs = VipOffsetLineBetweenSlice( volume );
  offset_fp = VipOffsetFirstPoint( volume );
  foffset_vol = VipOffsetVolume( fvol );
  foffset_pbl = VipOffsetPointBetweenLine( fvol );
  foffset_lbs = VipOffsetLineBetweenSlice( fvol );
  foffset_fp = VipOffsetFirstPoint( fvol );

  dataGENSTRING = VipGetDataPtr_GENSTRING( volume );
  fdata = VipGetDataPtr_VFLOAT( fvol );

  for(it=0;it<tsize;it++)
    {
      ptrGENSTRING = dataGENSTRING + offset_fp + it*offset_vol;
      fptr = fdata + foffset_fp + it*foffset_vol;

      for(iz=0;iz<zsize;iz++)
	{
	  for(iy=0;iy<ysize;iy++)
	    {
	      for(ix=xsize;ix--;)
		{
		  *fptr++ = (float)*ptrGENSTRING++;
		}
	      ptrGENSTRING += offset_pbl;
	      fptr += foffset_pbl;
	    }
	  ptrGENSTRING += offset_lbs;
	  fptr += foffset_lbs;
	}		
    }	

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END


#NONTYPED_FUNC_BEGIN VipTransferDataFromFloatVolume
#TYPE_LIST ANY
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
int			VipTransferDataFromFloatVolume
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
        Volume      *fvol
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  int status=0;

  if(VipTestExist( volume )==PB)
    {
      VipPrintfExit("(volume.gen)VipTransferDataFromFloatVolume");
      return(PB);
    }
  if((VipVerifyAll( fvol )==PB)||(VipTestType(fvol,VFLOAT)==PB))
    {
      VipPrintfError("PB with FLOAT volume");
      VipPrintfExit("(volume.gen)VipTransferDataFromFloatVolume");
      return(PB);
    }

 switch( mVipVolType( volume ) )
   {
   case GENSTRING :
     status = VipTransferDataFromFloatVolume_GENSTRING( volume, fvol);
     break;
   }
 return(status);
}
#FUNCTION_END
#NONTYPED_FUNC_END



#TYPED_FUNC_BEGIN VipTransferDataFromFloatVolume_GENSTRING
#TYPE_LIST_STATIC ANY
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
	int			VipTransferDataFromFloatVolume_GENSTRING
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	Volume *fvol
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  char message[VIP_NAME_MAXLEN];
  long offset_pbl, offset_lbs, offset_vol, offset_fp;
  long foffset_pbl, foffset_lbs, foffset_vol, foffset_fp;
  int xsize, ysize, zsize, tsize;
  int ix, iy, iz, it;
  GENTYPE *dataGENSTRING, *ptrGENSTRING;
  Vip_FLOAT *fdata, *fptr;

  if (VipTestState(fvol,STATE_DECLARED))
    {
      (void)sprintf(message,"(VipTransferDataFromFloatVolume_GENSTRING)This volume is not allocated: %s",VipGetVolumeName(fvol));
      VipPrintfError(message);
      return(PB);
    }
  if ( (mVipVolSizeX(volume)!=mVipVolSizeX(fvol))
       ||(mVipVolSizeY(volume)!=mVipVolSizeY(fvol))
       ||(mVipVolSizeT(volume)!=mVipVolSizeT(fvol))
       ||(mVipVolSizeZ(volume)!=mVipVolSizeZ(fvol)))
   {
      VipPrintfError("Same size are required in 4 dimensions...");
      VipPrintfExit("VipTransferDataFromFloatVolume_GENSTRING");
      return(PB);
   }

   VipGet4DSize(volume,&xsize,&ysize,&zsize,&tsize);
	
  offset_vol = VipOffsetVolume( volume );
  offset_pbl = VipOffsetPointBetweenLine( volume );
  offset_lbs = VipOffsetLineBetweenSlice( volume );
  offset_fp = VipOffsetFirstPoint( volume );
  foffset_vol = VipOffsetVolume( fvol );
  foffset_pbl = VipOffsetPointBetweenLine( fvol );
  foffset_lbs = VipOffsetLineBetweenSlice( fvol );
  foffset_fp = VipOffsetFirstPoint( fvol );

  dataGENSTRING = VipGetDataPtr_GENSTRING( volume );
  fdata = VipGetDataPtr_VFLOAT( fvol );

  for(it=0;it<tsize;it++)
    {
      ptrGENSTRING = dataGENSTRING + offset_fp + it*offset_vol;
      fptr = fdata + foffset_fp + it*foffset_vol;

      for(iz=0;iz<zsize;iz++)
	{
	  for(iy=0;iy<ysize;iy++)
	    {
	      for(ix=xsize;ix--;)
		{
		  *ptrGENSTRING++ = (GENTYPE) *fptr++;
		}
	      ptrGENSTRING += offset_pbl;
	      fptr += foffset_pbl;
	    }
	  ptrGENSTRING += offset_lbs;
	  fptr += foffset_lbs;
	}		
    }	

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END





#TYPED_FUNC_BEGIN VipGetDataPtr_GENSTRING
#TYPE_LIST_EXTERN ANY
#PROTOTYPE_BEGIN
/*---------------------------------------------------------------------------*/
GENTYPE *VipGetDataPtr_GENSTRING
/*return typed ptr on data*/
/*---------------------------------------------------------------------------*/
(
 Volume *vol
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  char message[VIP_NAME_MAXLEN];

  if (VipVerifyAll(vol)==PB || VipTestType(vol,GENSTRING)==PB)
    {
      VipPrintfExit("(volume.gen)VipGetDataPtr_GENSTRING");
      return(NULL);
    }
  if (VipTestState(vol,STATE_DECLARED)==OK)
    {
      (void)sprintf(message,"(VipGetDataPtr_GENSTRING)Allocate data for volume %s",vol->name);
      VipPrintfWarning(message);
      VipAllocateVolumeData(vol);
    }
  VipSetState(vol,STATE_FILLED);
  /*we consider here that if the data ptr is requested by the
    user, it means data are or will be filled*/
  return((GENTYPE *)(vol->data));
}
#FUNCTION_END
#TYPED_FUNC_END

#NONTYPED_FUNC_BEGIN VipSetVolumeLevel
#TYPE_LIST ANY
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
int			VipSetVolumeLevel
/*set 4D image and border to level value*/
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	int         level
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  int status=0;

  if(VipTestExist( volume )==PB)
    {
      VipPrintfExit("(volume.gen)VipSetVolumeLevel");
      return(PB);
    }
  switch( mVipVolType( volume ) )
    {
    case GENSTRING :
      status = VipSetVolumeLevel_GENSTRING( volume, ( GENTYPE )level);
      break;
   }
 return(status);
}
#FUNCTION_END
#NONTYPED_FUNC_END


#TYPED_FUNC_BEGIN VipSetVolumeLevel_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#TYPE_LIST_STATIC ANY_INT
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
int			VipSetVolumeLevel_GENSTRING
/*set 4D image and border to level value*/
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	GENTYPE			level
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  char message[VIP_NAME_MAXLEN];
  long offset_vol;
  GENTYPE *ptrGENSTRING;

  if (VipVerifyAll(volume)==PB || VipTestType(volume,GENSTRING)==PB)
    {
      VipPrintfExit("(volume.gen)VipSetVolumeLevel_GENSTRING");
      return(PB);
    }
  if (VipTestState(volume,STATE_DECLARED))
    {
      (void)sprintf(message,"(VipSetVolumeLevel_GENSTRING)Allocate data for volume %s",VipGetVolumeName(volume));
      VipPrintfWarning(message);
      VipAllocateVolumeData(volume);
    }
  offset_vol = VipOffsetVolume( volume );
  offset_vol *= VipSizetOf( volume);
  ptrGENSTRING = VipGetDataPtr_GENSTRING( volume );
  for(;offset_vol--;)
    {
      *(ptrGENSTRING++) = level;
    }	

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END

#NONTYPED_FUNC_BEGIN VipSetImageLevel
#TYPE_LIST ANY
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
int			VipSetImageLevel
/* set 4D image (except border) to level value*/
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	int         level
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  int status=0;

  if(VipTestExist( volume )==PB)
    {
      VipPrintfExit("(volume.gen)VipSetImageLevel");
      return(PB);
    }
 switch( mVipVolType( volume ) )
   {
   case GENSTRING :
     status = VipSetImageLevel_GENSTRING( volume, ( GENTYPE )level);
     break;
   }
 return(status);
}
#FUNCTION_END
#NONTYPED_FUNC_END

#TYPED_FUNC_BEGIN VipSetImageLevel_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#TYPE_LIST_STATIC ANY_INT
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
	int			VipSetImageLevel_GENSTRING
/* set 4D image (except border) to level value*/
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	GENTYPE			level
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  char message[VIP_NAME_MAXLEN];
  long offset_pbl, offset_lbs, offset_vol, offset_fp;
  int xsize, ysize, zsize, tsize;
  int ix, iy, iz, it;
  GENTYPE *dataGENSTRING, *ptrGENSTRING;

  if (VipVerifyAll(volume)==PB || VipTestType(volume,GENSTRING)==PB)
    {
      VipPrintfExit("(volume.gen)VipSetImageLevel_GENSTRING");
      return(PB);
    }
  if (VipTestState(volume,STATE_DECLARED))
    {
      (void)sprintf(message,"(VipSetImageLevel_GENSTRING)Allocate data for volume %s",VipGetVolumeName(volume));
      VipPrintfWarning(message);
      if (VipAllocateVolumeData(volume)==PB) return(PB);
    }
  VipGet4DSize(volume,&xsize,&ysize,&zsize,&tsize);
	
  offset_vol = VipOffsetVolume( volume );
  offset_pbl = VipOffsetPointBetweenLine( volume );
  offset_lbs = VipOffsetLineBetweenSlice( volume );
  offset_fp = VipOffsetFirstPoint( volume );

  dataGENSTRING = VipGetDataPtr_GENSTRING( volume );
  for(it=0;it<tsize;it++)
    {
      ptrGENSTRING = dataGENSTRING + offset_fp + it*offset_vol;
      for(iz=0;iz<zsize;iz++)
	{
	  for(iy=0;iy<ysize;iy++)
	    {
	      for(ix=xsize;ix--;)
		{
		  *(ptrGENSTRING++) = level;
		}
	      ptrGENSTRING += offset_pbl;
	    }
	  ptrGENSTRING += offset_lbs;
	}		
    }	

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END

#NONTYPED_FUNC_BEGIN VipSet3DImageLevel
#TYPE_LIST ANY
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
int			VipSet3DImageLevel
/* set one 3D image (except border) to level value*/
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	int         level,
	int the_t
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  int status=OK;

  if(VipTestExist( volume )==PB)
    {
      VipPrintfExit("(volume.gen)VipSet3DImageLevel");
      return(PB);
    }
 switch( mVipVolType( volume ) )
   {
   case GENSTRING :
     status = VipSet3DImageLevel_GENSTRING( volume, ( GENTYPE )level, the_t);
     break;
   }

 return(status);
}
#FUNCTION_END
#NONTYPED_FUNC_END


#TYPED_FUNC_BEGIN VipSet3DImageLevel_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#TYPE_LIST_STATIC ANY_INT
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
	int			VipSet3DImageLevel_GENSTRING
/* set one 3D image (except border) to level value*/
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	GENTYPE			level,
	int the_t
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  char message[VIP_NAME_MAXLEN];
  long offset_pbl, offset_lbs, offset_vol, offset_fp;
  int xsize, ysize, zsize;
  int ix, iy, iz;
  GENTYPE *dataGENSTRING, *ptrGENSTRING;

  if (VipVerifyAll(volume)==PB || VipTestType(volume,GENSTRING)==PB)
    {
      VipPrintfExit("(volume.gen)VipSet3DImageLevel_GENSTRING");
      return(PB);
    }
  if (VipTestState(volume,STATE_DECLARED))
    {
      (void)sprintf(message,"(VipSet3DImageLevel_GENSTRING)Allocate data for volume %s",VipGetVolumeName(volume));
      VipPrintfWarning(message);
      if (VipAllocateVolumeData(volume)==PB) return(PB);
    }
  if((the_t<0)||(the_t>=VipSizetOf( volume)))
    {
      (void)sprintf(message,"(VipSet3DImageLevel_GENSTRING)3D image %d does not exist",the_t);
      VipPrintfError(message);
      fprintf(stderr,"Volume %s t range:[0..%d]\n",VipGetVolumeName(volume),
	      VipSizetOf( volume));
      VipPrintfExit("(volume.gen)VipSet3DImageLevel_GENSTRING");
      return(PB);
    }

  VipGet3DSize(volume,&xsize,&ysize,&zsize);
	

  offset_vol = VipOffsetVolume( volume );
  offset_pbl = VipOffsetPointBetweenLine( volume );
  offset_lbs = VipOffsetLineBetweenSlice( volume );
  offset_fp = VipOffsetFirstPoint( volume );

  dataGENSTRING = VipGetDataPtr_GENSTRING( volume );
  ptrGENSTRING = dataGENSTRING + offset_fp + the_t*offset_vol;
  for(iz=0;iz<zsize;iz++)
    {
      for(iy=0;iy<ysize;iy++)
	{
	  for(ix=xsize;ix--;)
	    {
	      *(ptrGENSTRING++) = level;
	    }
	  ptrGENSTRING += offset_pbl;
	}
      ptrGENSTRING += offset_lbs;
    }

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END

#NONTYPED_FUNC_BEGIN VipSetBorderLevel
#TYPE_LIST ANY
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
int			VipSetBorderLevel
/* set one 3D image (except border) to level value*/
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	int         level
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  int status=0;

  if(VipTestExist( volume )==PB)
    {
      VipPrintfExit("(volume.gen)VipSetBorderLevel");
      return(PB);
    }
 switch( mVipVolType( volume ) )
   {
   case GENSTRING :
     status = VipSetBorderLevel_GENSTRING( volume, ( GENTYPE )level);
     break;
   }
 return(status);
}
#FUNCTION_END
#NONTYPED_FUNC_END

#TYPED_FUNC_BEGIN VipSetBorderLevel_GENSTRING
#TYPE_LIST_EXTERN FLOAT DOUBLE
#TYPE_LIST_STATIC ANY_INT
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
int			VipSetBorderLevel_GENSTRING
/*----------------------------------------------------------------------------*/
(
	Volume	    *volume,
	GENTYPE	    levelGENSTRING
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  char message[VIP_NAME_MAXLEN];
  VipOffsetStruct *os;
  GENTYPE *dataGENSTRING, *ptrGENSTRING;
  int ix, iy, iz, it;
  int remain;

  if (VipVerifyAll(volume)==PB || VipTestType(volume,GENSTRING)==PB)
    {
      VipPrintfExit("(volume.gen)VipSetBorderLevel_GENSTRING");
      return(PB);
    }
  if (VipTestState(volume,STATE_DECLARED))
    {
      (void)sprintf(message,"(VipSetBorderLevel_GENSTRING)Allocate data for volume %s",VipGetVolumeName(volume));
      VipPrintfWarning(message);
      if (VipAllocateVolumeData(volume) == PB) return(PB);
    }

  if (  volume->borderWidth== 0 )
    {
      VipPrintfError( "The volume has no border (VipSetBorderLevel_GENSTRING)" );
      VipPrintfExit("VipSetBorderLevel_GENSTRING");
      return(PB);
    }

  os = VipGetOffsetStructure(volume);	

  remain = os->oFirstPoint - os->oPointBetweenLine - os->oLineBetweenSlice;

  dataGENSTRING = VipGetDataPtr_GENSTRING( volume );

  for(it=0;it<mVipVolSizeT (volume );it++)
    {
      ptrGENSTRING = dataGENSTRING + it*os->oVolume;
      for ( ix = 0; ix < os->oFirstPoint; ix++ )
	*ptrGENSTRING++ = levelGENSTRING;
      for ( iz = 0; iz < mVipVolSizeZ (volume ); iz++ )
	{
	  for ( iy = 0; iy < mVipVolSizeY (volume ); iy++ )
	    {
	      ptrGENSTRING += mVipVolSizeX (volume );
	      for ( ix = 0; ix < os->oPointBetweenLine; ix++ )
		*(ptrGENSTRING++) = levelGENSTRING;
	    }
	  for ( ix = 0; ix < os->oLineBetweenSlice; ix++ )
	    *(ptrGENSTRING++) = levelGENSTRING;
	}
      for ( ix = 0; ix < remain; ix++ )
	*(ptrGENSTRING++) = levelGENSTRING;
    }

  VipFree(os);

  return(OK);
}
#FUNCTION_END
#TYPED_FUNC_END		


/*----------------------------------------------------------------------------*/
	
/*	void			VipAddBorder */
	
/*----------------------------------------------------------------------------*/
	/*
(
	Volume	    *volume
)

{
  VipPrintfError("Sorry, VipAddBorder not implemented yet");
  VipPrintExit("VipAddBorder");
}
*/
/*----------------------------------------------------------------------------*/
/*	
	void			VipPrintfVolume
*/
/*----------------------------------------------------------------------------*/
/*
(
	Volume	    *volume,
	int			n,
	int			mode
)
{
	int			ix, bx, ex,
				iy, by, ey,
				iz, bz, ez,
				borderWidthX2;
	Vip_U8BIT_t	  ***ptU8BIT;
	S32BIT_t	  ***ptS32BIT;
	
	if ( !testFilled ( volume ) ||
		!testTypeN ( volume, 2, U8BIT, S32BIT ) )
		goto abort;
		
if ( EXEC )
{
	borderWidthX2 = 2 * volume->borderWidth;
	switch ( mode )
	{
		case 0 :
			printf ( "beginning of '%s'\n", volume->name );
			bx = by = bz = 0;
			ex = ( n < volume->size.x + borderWidthX2 ? n :
					volume->size.x + borderWidthX2 );
			ey = ( n < volume->size.y + borderWidthX2 ? n :
					volume->size.y + borderWidthX2 );
			ez = ( n < volume->size.z + borderWidthX2 ? n :
					volume->size.z + borderWidthX2 );
			break;
		case 1 :
			printf ( "ending of '%s'\n", volume->name );
			bx = ( volume->size.x + borderWidthX2 - n < 0 ? 0 :
					volume->size.x + borderWidthX2 - n );
			by = ( volume->size.y + borderWidthX2 - n < 0 ? 0 :
					volume->size.y + borderWidthX2 - n );
			bz = ( volume->size.z + borderWidthX2 - n < 0 ? 0 :
					volume->size.z + borderWidthX2 - n );
			ex = volume->size.x + borderWidthX2 ;
			ey = volume->size.y + borderWidthX2;
			ez = volume->size.z + borderWidthX2;
			break;
		default :
			printf ( "mode unknown !\n" );
			goto abort;
	}
	switch ( volume->type )
	{
		case U8BIT :
			ptU8BIT = tab_U8BIT ( volume );
			for ( iz = bz; iz < ez; iz++ )
			{
				for ( iy = by; iy < ey; iy++ )
				{
					for ( ix = bx; ix < ex; ix++ )
						printf ( "%.3d ", ptU8BIT[iz][iy][ix] );
					printf ( "\n" );
				}
				printf ( "\n" );
			}
			break;
		case S32BIT :
			ptS32BIT = tab_S32BIT ( volume );
			for ( iz = bz; iz < ez; iz++ )
			{
				for ( iy = by; iy < ey; iy++ )
				{
					for ( ix = bx; ix < ex; ix++ )
						printf ( "%.3ld ", ptS32BIT[iz][iy][ix] );
					printf ( "\n" );
				}
				printf ( "\n" );
			}
			break;
	}
	printf ( "\n" );
}
	return;
abort :
	printfexit ( "(volume)printfvolume" );
}
*/



#TYPED_FUNC_BEGIN VipQuantify_GENSTRING
#TYPE_LIST_EXTERN ANY_INT
#PROTOTYPE_BEGIN
/*----------------------------------------------------------------------------*/
float			VipQuantify_GENSTRING
/*----------------------------------------------------------------------------*/
(
	Volume      *vol,
	GENTYPE	    value
)
#PROTOTYPE_END
#FUNCTION_BEGIN
{
  if (VipVerifyAll(vol)==PB || VipTestType(vol, GENSTRING)==PB)
    {
      VipPrintfExit("(volume.gen)VipQuantify_GENSTRING");
      return((float)PB);
    }

  return(mVipVolShfjScale(vol)*(float)value+mVipVolShfjOffset(vol));
}
#FUNCTION_END
#TYPED_FUNC_END	
